// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace rumda.Protocol
{

using global::System;
using global::FlatBuffers;

public struct Player : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Player GetRootAsPlayer(ByteBuffer _bb) { return GetRootAsPlayer(_bb, new Player()); }
  public static Player GetRootAsPlayer(ByteBuffer _bb, Player obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Player __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool IsLeader { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string PlayerId { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlayerIdBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetPlayerIdBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetPlayerIdArray() { return __p.__vector_as_array<byte>(6); }
  public string NickName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNickNameBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetNickNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetNickNameArray() { return __p.__vector_as_array<byte>(8); }
  public long Level { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }

  public static Offset<Player> CreatePlayer(FlatBufferBuilder builder,
      bool IsLeader = false,
      StringOffset playerIdOffset = default(StringOffset),
      StringOffset nickNameOffset = default(StringOffset),
      long level = 0) {
    builder.StartObject(4);
    Player.AddLevel(builder, level);
    Player.AddNickName(builder, nickNameOffset);
    Player.AddPlayerId(builder, playerIdOffset);
    Player.AddIsLeader(builder, IsLeader);
    return Player.EndPlayer(builder);
  }

  public static void StartPlayer(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddIsLeader(FlatBufferBuilder builder, bool IsLeader) { builder.AddBool(0, IsLeader, false); }
  public static void AddPlayerId(FlatBufferBuilder builder, StringOffset playerIdOffset) { builder.AddOffset(1, playerIdOffset.Value, 0); }
  public static void AddNickName(FlatBufferBuilder builder, StringOffset nickNameOffset) { builder.AddOffset(2, nickNameOffset.Value, 0); }
  public static void AddLevel(FlatBufferBuilder builder, long level) { builder.AddLong(3, level, 0); }
  public static Offset<Player> EndPlayer(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Player>(o);
  }
};


}
